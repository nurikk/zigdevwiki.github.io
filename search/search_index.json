{"config":{"indexing":"full","lang":["en","ru"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Zig Dev Wiki \ud83d\udcf1 The main idea behind this mini-wiki is to make it easier and faster to get to know the gist for beginners who want to learn how to make DIY Zigbee devices. \ud83c\udf81 We can help many others by collecting as much useful information as possible in one place. \u2705 If you have any useful information (link, article, source code, printed circuit board, etc.) that will be relevant, just make a PR to the main branch or issue to this repository and it will be added. \ud83d\ude4f We would be grateful for any help from the community! \ud83d\udd35 Let's start from the beginning","title":"Welcome"},{"location":"#welcome","text":"","title":"Welcome"},{"location":"#to-zig-dev-wiki","text":"\ud83d\udcf1 The main idea behind this mini-wiki is to make it easier and faster to get to know the gist for beginners who want to learn how to make DIY Zigbee devices. \ud83c\udf81 We can help many others by collecting as much useful information as possible in one place. \u2705 If you have any useful information (link, article, source code, printed circuit board, etc.) that will be relevant, just make a PR to the main branch or issue to this repository and it will be added. \ud83d\ude4f We would be grateful for any help from the community! \ud83d\udd35 Let's start from the beginning","title":"to Zig Dev Wiki"},{"location":"Begin/","text":"Start IAR How-to IAR install Apply SDK patch Hardware DEV Board used on open source projects DIYRuZ (CHDTECH_DEV) Reference docs zcl-id zstack-constants Coordinators & routers firmware Koenkk Egony Jethome Collection of miscellaneous RU zigbee wiki awesome-zigbee","title":"Start"},{"location":"Begin/#start","text":"","title":"Start"},{"location":"Begin/#iar","text":"How-to IAR install Apply SDK patch","title":"IAR"},{"location":"Begin/#hardware","text":"DEV Board used on open source projects DIYRuZ (CHDTECH_DEV)","title":"Hardware"},{"location":"Begin/#reference-docs","text":"zcl-id zstack-constants","title":"Reference docs"},{"location":"Begin/#coordinators-routers-firmware","text":"Koenkk Egony Jethome","title":"Coordinators &amp; routers firmware"},{"location":"Begin/#collection-of-miscellaneous","text":"RU zigbee wiki awesome-zigbee","title":"Collection of miscellaneous"},{"location":"Begin/IAR_install/","text":"Original russian how-to without description of SDK patch applying. Here you can find machine translation and additional description of SDK patch applying. Build zigbee firmware from source. In this article I will try to describe the process of building firmware for Zigbee using the IAR Embedded Workbench\u00ae for 8051 environment. Foreword: You must immediately answer the question: why not immediately give the firmware? There are many reasons for this: This is contrary to the philosophy of open source: if you want to tweak something, you will not succeed. If you find an error / revision / optimization, but the author has abandoned the project for a long time, then without the source code the project will simply \u201cdie\u201d. If you need to change something very simple, for yourself, even not knowing how to program, you can always figure out which numbers are responsible for what. When there is open source, and information on how to put everything together, written in an accessible language, there is always an opportunity to experiment with the settings, to figure out what works and how. And many other pluses. To demonstrate the installation, I installed a clean system to show you how to do it from scratch. Setting up the development environment The IAR Embedded Workbench will be used as the development environment, where 8051 is the chip architecture, and not the system version, as you might think. First you need IAR version 10.30 download from the link We start, you must select the item \"Install IAR Embedded Workbench\u00ae for 8051\" When installing IAR, you must select the custom mode: and uncheck the Dongle drivers installation When trying to start a project, there may be an error like this: Therefore, before starting the project, you need to make sure that python is installed. You can check this on the command line: python \u2013-version If all is well, it will show the currently installed version of python, as in the example: If not, then go to install python Install it. Be sure to check the \"add python **** to path\" Install git and a simple client for it. go in and download git Install, all checkboxes can be left by default. go to the site https://tortoisegit.org/ We download the program depending on the bitness of the system (well, or just choose 32 bit, it does not play any significant role) If necessary, you can download the Russification. I will not do this in this manual. Install tortoisegit, after installation, tick the \"Run first start wizard\" (usually it is by default) By default, the path to git.exe will be written, or you need to specify the path yourself. You can immediately generate ssh keys \"Generate PuTTy key pair\": Press generate, actively move the mouse / press the keys (the person acts as an RNG) After generation, save the \"Save private key\" public key (in the figure it starts with \"ssh-rsa AA ...\"), copy it to the clipboard (you can also save it if necessary \"Save public key\") Go to your git account in the SSH keys section Click \"Add new\" and paste the previously copied public key. Install firmware Z-Stack 3.0.2 - this is an SDK for developing firmware. We answer tricky questions, download. Install, you can slightly reduce the path to zstack: C:\\Z-Stack 3.0.2. There should be no questions here. Apply SDK patch After installing the IAR, you should apply the patch to correctly compile the sources. You can find the patch here How-to install: Save 0001-Fixes.patch to your Z-stack working directory (C:\\Z-Stack 3.0.2) Open console at Z-stack working directory Run git apply 0001-Fixes.patch Download source code from repository An example would be Zigbee CO2 Sensor and select Code, SSH and click on the copy to clipboard icon: We go to the computer in zstack: C:\\Z-Stack 3.0.2\\Projects\\zstack\\HomeAutomation (if you did not change the path, then first there will be a folder \"Texas Instruments\") right mouse button, \"Git clone ...\" Put the URL address from the clipboard, current directory, be sure to check the recursive checkbox, this will help to pull together the BME280_driver and zstack-lib dependencies Success screen: The IAR Embedded Workbench can now be launched. Open the project using the Open workspace menu item We find our folder with the downloaded project, then in the CC2530DB folder we find the project file Select the RouterEB configuration and execute Rebuild All.","title":"IAR install"},{"location":"Begin/IAR_install/#build-zigbee-firmware-from-source","text":"In this article I will try to describe the process of building firmware for Zigbee using the IAR Embedded Workbench\u00ae for 8051 environment.","title":"Build zigbee firmware from source."},{"location":"Begin/IAR_install/#foreword","text":"You must immediately answer the question: why not immediately give the firmware? There are many reasons for this: This is contrary to the philosophy of open source: if you want to tweak something, you will not succeed. If you find an error / revision / optimization, but the author has abandoned the project for a long time, then without the source code the project will simply \u201cdie\u201d. If you need to change something very simple, for yourself, even not knowing how to program, you can always figure out which numbers are responsible for what. When there is open source, and information on how to put everything together, written in an accessible language, there is always an opportunity to experiment with the settings, to figure out what works and how. And many other pluses. To demonstrate the installation, I installed a clean system to show you how to do it from scratch.","title":"Foreword:"},{"location":"Begin/IAR_install/#setting-up-the-development-environment","text":"The IAR Embedded Workbench will be used as the development environment, where 8051 is the chip architecture, and not the system version, as you might think. First you need IAR version 10.30 download from the link We start, you must select the item \"Install IAR Embedded Workbench\u00ae for 8051\" When installing IAR, you must select the custom mode: and uncheck the Dongle drivers installation When trying to start a project, there may be an error like this: Therefore, before starting the project, you need to make sure that python is installed. You can check this on the command line: python \u2013-version If all is well, it will show the currently installed version of python, as in the example: If not, then go to install python Install it. Be sure to check the \"add python **** to path\"","title":"Setting up the development environment"},{"location":"Begin/IAR_install/#install-git-and-a-simple-client-for-it","text":"go in and download git Install, all checkboxes can be left by default. go to the site https://tortoisegit.org/ We download the program depending on the bitness of the system (well, or just choose 32 bit, it does not play any significant role) If necessary, you can download the Russification. I will not do this in this manual. Install tortoisegit, after installation, tick the \"Run first start wizard\" (usually it is by default) By default, the path to git.exe will be written, or you need to specify the path yourself. You can immediately generate ssh keys \"Generate PuTTy key pair\": Press generate, actively move the mouse / press the keys (the person acts as an RNG) After generation, save the \"Save private key\" public key (in the figure it starts with \"ssh-rsa AA ...\"), copy it to the clipboard (you can also save it if necessary \"Save public key\") Go to your git account in the SSH keys section Click \"Add new\" and paste the previously copied public key. Install firmware Z-Stack 3.0.2 - this is an SDK for developing firmware. We answer tricky questions, download. Install, you can slightly reduce the path to zstack: C:\\Z-Stack 3.0.2. There should be no questions here.","title":"Install git and a simple client for it."},{"location":"Begin/IAR_install/#apply-sdk-patch","text":"After installing the IAR, you should apply the patch to correctly compile the sources. You can find the patch here How-to install: Save 0001-Fixes.patch to your Z-stack working directory (C:\\Z-Stack 3.0.2) Open console at Z-stack working directory Run git apply 0001-Fixes.patch","title":"Apply SDK patch"},{"location":"Begin/IAR_install/#download-source-code-from-repository","text":"An example would be Zigbee CO2 Sensor and select Code, SSH and click on the copy to clipboard icon: We go to the computer in zstack: C:\\Z-Stack 3.0.2\\Projects\\zstack\\HomeAutomation (if you did not change the path, then first there will be a folder \"Texas Instruments\") right mouse button, \"Git clone ...\" Put the URL address from the clipboard, current directory, be sure to check the recursive checkbox, this will help to pull together the BME280_driver and zstack-lib dependencies Success screen: The IAR Embedded Workbench can now be launched. Open the project using the Open workspace menu item We find our folder with the downloaded project, then in the CC2530DB folder we find the project file Select the RouterEB configuration and execute Rebuild All.","title":"Download source code from repository"},{"location":"Etc/","text":"Other stuff Hardware Relay starting currents Fake DS18B20 zigbee-herdsman-converters devices.js exposes.js fromZigbee.js toZigbee.js Unsorted links Articles CC2530 timer configuration for 32MHz cc2530 timer 1 free mode (query method) cc2530 timer 1 PWM output cc2530 timer 3 PWM Code files ZStack-CC2530-2.3.0-1.4.0.zip > hal_dma.h Around Zigbee links Projects Smart nursing home project","title":"Other stuff"},{"location":"Etc/#other-stuff","text":"","title":"Other stuff"},{"location":"Etc/#hardware","text":"Relay starting currents Fake DS18B20","title":"Hardware"},{"location":"Etc/#zigbee-herdsman-converters","text":"devices.js exposes.js fromZigbee.js toZigbee.js","title":"zigbee-herdsman-converters"},{"location":"Etc/#unsorted-links","text":"","title":"Unsorted links"},{"location":"Etc/#articles","text":"CC2530 timer configuration for 32MHz cc2530 timer 1 free mode (query method) cc2530 timer 1 PWM output cc2530 timer 3 PWM","title":"Articles"},{"location":"Etc/#code-files","text":"ZStack-CC2530-2.3.0-1.4.0.zip > hal_dma.h","title":"Code files"},{"location":"Etc/#around-zigbee-links","text":"","title":"Around Zigbee links"},{"location":"Etc/#projects","text":"Smart nursing home project","title":"Projects"},{"location":"Projects/","text":"Projects CC2530 DIYRuZ AirSense *HARD flower *HARD Battery Button geiger *HARD freepad *HARD relay with ds18b20 GitHub ZigUP - Relais, Switch, Sensor and Router *HARD wireless lcd sensor network An open source ZigBee plug for your own smart home *HARD Coordinator and End Devices, Modbus interface door lock-lower computer-door lock base station LEHome Smart Home Zigbee Sensor Module Code Bunch of sample apps SmartPower RemoteControl TempHumiSensor UART not ZStack Electric Fan TI Simple Dimmable LED Light Other chips Chip Project nrf52840 RGBW dimmer project JN5169 Better firmware Xiaomi Aqara switches JN5169 Xiaomi round button with bind JN5168 Light Link, multiple dimmable light endpoints JN5169 Zigbee \ud83d\udc1d Router for Xiaomi DGNWG05LM and Aqara ZHWG11LM gateways JN5169 Zigbee \ud83d\udc1d Router for LM15-SP-WM module Other projects Xiaomi Gateway Hack Xiaomi Power Plug Hack ZLL_Lights Article Github ZigWS2812 Article Github","title":"Projects"},{"location":"Projects/#projects","text":"","title":"Projects"},{"location":"Projects/#cc2530","text":"","title":"CC2530"},{"location":"Projects/#diyruz","text":"AirSense *HARD flower *HARD Battery Button geiger *HARD freepad *HARD relay with ds18b20","title":"DIYRuZ"},{"location":"Projects/#github","text":"ZigUP - Relais, Switch, Sensor and Router *HARD wireless lcd sensor network An open source ZigBee plug for your own smart home *HARD Coordinator and End Devices, Modbus interface door lock-lower computer-door lock base station LEHome Smart Home Zigbee Sensor Module Code Bunch of sample apps SmartPower RemoteControl TempHumiSensor UART not ZStack Electric Fan","title":"GitHub"},{"location":"Projects/#ti","text":"Simple Dimmable LED Light","title":"TI"},{"location":"Projects/#other-chips","text":"Chip Project nrf52840 RGBW dimmer project JN5169 Better firmware Xiaomi Aqara switches JN5169 Xiaomi round button with bind JN5168 Light Link, multiple dimmable light endpoints JN5169 Zigbee \ud83d\udc1d Router for Xiaomi DGNWG05LM and Aqara ZHWG11LM gateways JN5169 Zigbee \ud83d\udc1d Router for LM15-SP-WM module","title":"Other chips"},{"location":"Projects/#other-projects","text":"Xiaomi Gateway Hack Xiaomi Power Plug Hack","title":"Other projects"},{"location":"Projects/#zll_lights","text":"Article Github","title":"ZLL_Lights"},{"location":"Projects/#zigws2812","text":"Article Github","title":"ZigWS2812"}]}